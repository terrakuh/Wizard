scalar DateTime

type User {
	id: ID!
	name: String!
}

type LoginInformation {
	salt: String! # base64 encoded
	hashType: String! # sha256, sha512
}

type Lobby {
	code: String!
	mode: String!
	roundLimit: Int
	players: [User!]!
	canStart: Boolean
}

type PlayerState {
	player: User!
	score: Int!
	tricksCalled: Int
	tricksMade: Int
}

type RoundState {
	trumpColor: String
	trumpCard: String
	round: Int!
	pastTricks: [[PlayedCard!]!]!
}

type PlayedCard {
	id: ID!
	player: User!
	isWinning: Boolean!
}

type TrickState {
	playerStates: [PlayerState!]!
	leadColor: String
	leadCard: PlayedCard
	round: Int
	turn: User
	deck: [PlayedCard!]
}

type PlayableCard {
	id: ID!
	playable: Boolean!
	variants: [PlayableCard!]
}

type RequiredAction {
	type: String!
	options: [String!]!
}

type GameInfo {
	roundState: RoundState!
	trickState: TrickState!
	hand: [PlayableCard!]!
}

# TODO
# type Appointment {
# 	start: DateTime!
# 	end: DateTime
# }

type Query {
	# user management
	loginInformation(name: String!): LoginInformation
	user(id: ID!): User
	whoami: User

	# lobby management
	lobby: Lobby
	modes: [String!]!

	# game logic
	gameInfo: GameInfo
	requiredAction: RequiredAction
}

########################################
############### MUTATION ###############
########################################

type Mutation {
	# user management
	register(name: String!, passwordHash: String!, salt: String!, hashType: String!, token: String!): Boolean!
	login(name: String!, passwordHash: String!): User
	logout: Boolean!

	# lobby management
	createLobby: String!
	setLobbySettings(mode: String): Boolean!
	joinLobby(code: String!): Boolean!
	leaveLobby: Boolean!
	startGame: Boolean!

	# game logic
	completeAction(option: String!): Boolean!
}

schema {
	query: Query
	mutation: Mutation
}
