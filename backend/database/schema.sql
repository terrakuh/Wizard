
-- general settings
PRAGMA foreign_keys=ON;

-- tables
CREATE TABLE IF NOT EXISTS register_token(
	id INTEGER PRIMARY KEY,
	token VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS user(
	id INTEGER PRIMARY KEY,
	hash_type VARCHAR(8) NOT NULL,
	salt VARCHAR(255) NOT NULL,
	password VARCHAR(255) NOT NULL,
	name VARCHAR(255) NOT NULL UNIQUE
);

-- CREATE TABLE IF NOT EXISTS communicator(
-- 	id INTEGER PRIMARY KEY,
-- 	user INTEGER NOT NULL REFERENCES user(id) ON DELETE CASCADE,
-- 	type VARCHAR(8) NOT NULL,
-- 	argument VARCHAR(255) NOT NULL,
-- 	registered TIMESTAMP
-- );

CREATE TABLE IF NOT EXISTS session(
	id INTEGER PRIMARY KEY,
	user INTEGER NOT NULL REFERENCES user(id) ON DELETE CASCADE,
	expires DATETIME NOT NULL,
	cookie VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS appointment(
	id INTEGER PRIMARY KEY,
	start DATETIME NOT NULL
);

CREATE TABLE IF NOT EXISTS user_appointment(
	user INTEGER NOT NULL REFERENCES user(id) ON DELETE CASCADE,
	appointment INTEGER NOT NULL REFERENCES appointment(id) ON DELETE CASCADE,
	UNIQUE(user, appointment)
);

CREATE TABLE IF NOT EXISTS game(
	id INTEGER PRIMARY KEY,
	start DATETIME NOT NULL,
	end DATETIME
);

CREATE TABLE IF NOT EXISTS card(
	id INTEGER PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS round(
	id INTEGER PRIMARY KEY,
	[index] INTEGER NOT NULL,
	game INTEGER NOT NULL REFERENCES game(id) ON DELETE CASCADE,
	trump INTEGER REFERENCES card(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS round_user(
	id INTEGER PRIMARY KEY,
	round INTEGER NOT NULL REFERENCES round(id) ON DELETE CASCADE,
	score INTEGER NOT NULL,
	tricks_made INTEGER NOT NULL,
	tricks_called INTEGER NOT NULL,
	user INTEGER REFERENCES user(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS trick(
	id INTEGER PRIMARY KEY,
	round INTEGER NOT NULL REFERENCES round(id) ON DELETE CASCADE,
	[index] INTEGER NOT NULL,
	round_user INTEGER REFERENCES round_user(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS turn(
	id INTEGER PRIMARY KEY,
	trick INTEGER NOT NULL REFERENCES trick(id) ON DELETE CASCADE,
	[index] INTEGER NOT NULL,
	duration_s INTEGER NOT NULL,
	round_user INTEGER NOT NULL REFERENCES round_user(id) ON DELETE CASCADE,
	card INTEGER NOT NULL REFERENCES card(id) ON DELETE RESTRICT
);

-- cleanup
DELETE FROM session
	WHERE expires<=DATETIME('now');

DELETE FROM appointment
	WHERE start<=DATETIME('now', '-2 hours');
